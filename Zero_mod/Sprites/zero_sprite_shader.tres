[gd_resource type="VisualShader" load_steps=103 format=2]

[sub_resource type="VisualShaderNodeScalarOp" id=105]
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 3

[sub_resource type="VisualShaderNodeColorUniform" id=107]
uniform_name = "GreenColor2"

[sub_resource type="VisualShaderNodeColorUniform" id=108]
uniform_name = "GreenColor1"

[sub_resource type="VisualShaderNodeColorUniform" id=109]
uniform_name = "OutlineColor"

[sub_resource type="VisualShaderNodeColorUniform" id=110]
uniform_name = "R_GreenColor2"

[sub_resource type="VisualShaderNodeColorUniform" id=111]
uniform_name = "R_GreenColor1"

[sub_resource type="VisualShaderNodeColorUniform" id=112]
uniform_name = "R_OutlineColor"

[sub_resource type="VisualShaderNodeColorUniform" id=113]
uniform_name = "SaberColor1"

[sub_resource type="VisualShaderNodeColorUniform" id=114]
uniform_name = "SaberColor2"

[sub_resource type="VisualShaderNodeColorUniform" id=115]
uniform_name = "SaberColor3"

[sub_resource type="VisualShaderNodeColorUniform" id=116]
uniform_name = "SaberColor4"

[sub_resource type="VisualShaderNodeColorUniform" id=117]
uniform_name = "R_SaberColor1"

[sub_resource type="VisualShaderNodeColorUniform" id=118]
uniform_name = "R_SaberColor2"

[sub_resource type="VisualShaderNodeColorUniform" id=119]
uniform_name = "R_SaberColor3"

[sub_resource type="VisualShaderNodeColorUniform" id=120]
uniform_name = "R_SaberColor4"

[sub_resource type="VisualShaderNodeColorUniform" id=121]
uniform_name = "HairColor"

[sub_resource type="VisualShaderNodeColorUniform" id=122]
uniform_name = "R_HairColor"

[sub_resource type="VisualShaderNodeColorUniform" id=123]
uniform_name = "LightRedColor1"

[sub_resource type="VisualShaderNodeColorUniform" id=124]
uniform_name = "R_LightRedColor1"

[sub_resource type="VisualShaderNodeColorUniform" id=125]
uniform_name = "SaberColor0"

[sub_resource type="VisualShaderNodeScalarFunc" id=37]
function = 12

[sub_resource type="VisualShaderNodeColorUniform" id=126]
uniform_name = "R_SaberColor0"

[sub_resource type="VisualShaderNodeColorUniform" id=127]
uniform_name = "AuraColor"

[sub_resource type="VisualShaderNodeColorUniform" id=128]
uniform_name = "R_AuraColor"

[sub_resource type="VisualShaderNodeScalarUniform" id=129]
uniform_name = "Should_Blink"

[sub_resource type="VisualShaderNodeScalarOp" id=131]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=132]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarOp" id=133]
default_input_values = [ 0, 0.0, 1, 42.0 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarFunc" id=134]
function = 1

[sub_resource type="VisualShaderNodeScalarFunc" id=135]
function = 12

[sub_resource type="VisualShaderNodeScalarOp" id=136]
default_input_values = [ 0, 0.0, 1, 0.3 ]
operator = 1

[sub_resource type="VisualShaderNodeScalarFunc" id=137]
function = 29

[sub_resource type="VisualShaderNodeScalarOp" id=139]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeIf" id=140]
default_input_values = [ 0, 0.0, 1, 0.5, 2, 1e-05, 3, Vector3( 0, 0, 0 ), 4, Vector3( 0, 0, 0 ), 5, Vector3( 0, 0, 0 ) ]

[sub_resource type="VisualShaderNodeColorConstant" id=141]
constant = Color( 0.709804, 0.964706, 1, 1 )

[sub_resource type="VisualShaderNodeColorOp" id=142]

[sub_resource type="VisualShaderNodeScalarUniform" id=143]
uniform_name = "Darken"

[sub_resource type="VisualShaderNodeColorOp" id=144]
operator = 3

[sub_resource type="VisualShaderNodeScalarOp" id=39]
operator = 2

[sub_resource type="VisualShaderNodeScalarFunc" id=40]
function = 29

[sub_resource type="VisualShaderNodeScalarOp" id=41]
default_input_values = [ 0, 0.0, 1, 0.3 ]
operator = 1

[sub_resource type="VisualShaderNodeScalarUniform" id=42]
uniform_name = "Charge"

[sub_resource type="VisualShaderNodeTexture" id=1]
source = 2

[sub_resource type="VisualShaderNodeIf" id=46]
default_input_values = [ 0, 0.0, 1, 0.3, 2, 1e-05, 3, Vector3( 0, 0, 0 ), 4, Vector3( 1, 1, 1 ), 5, Vector3( 0, 0, 0 ) ]

[sub_resource type="VisualShaderNodeScalarConstant" id=47]

[sub_resource type="VisualShaderNodeScalarConstant" id=49]
constant = 1.0

[sub_resource type="VisualShaderNodeColorOp" id=52]
operator = 2

[sub_resource type="VisualShaderNodeColorUniform" id=53]
uniform_name = "Color"

[sub_resource type="VisualShaderNodeScalarUniform" id=55]
uniform_name = "Alpha"

[sub_resource type="VisualShaderNodeScalarOp" id=56]
operator = 2

[sub_resource type="VisualShaderNodeScalarFunc" id=57]
function = 1

[sub_resource type="VisualShaderNodeScalarFunc" id=60]
function = 29

[sub_resource type="VisualShaderNodeInput" id=61]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarOp" id=62]
default_input_values = [ 0, 0.0, 1, 120.0 ]
operator = 2

[sub_resource type="VisualShaderNodeIf" id=63]
default_input_values = [ 0, 0.0, 1, 1.0, 2, 1e-05, 3, Vector3( 0, 0, 0 ), 4, Vector3( 0, 0, 0 ), 5, Vector3( 0, 0, 0 ) ]

[sub_resource type="VisualShaderNodeScalarOp" id=64]
operator = 7

[sub_resource type="VisualShaderNodeScalarConstant" id=65]
constant = 0.5

[sub_resource type="VisualShaderNodeExpression" id=67]
size = Vector2( 1040.43, 1910.47 )
expression = "vec3 current_color = texture(TEXTURE, UV).rgb;

if (replace (current_color, crystal_color_1, crystal_replace_1, final_color, tolerance)){}
else if (replace (current_color, crystal_color_2, crystal_replace_2, final_color, tolerance)){}
else if (replace (current_color, crystal_color_3, crystal_replace_3, final_color, tolerance)){}

else if (replace (current_color, light_red_color_1, light_red_color_1_replace, final_color, tolerance)){}
else if (replace (current_color, main_color_1, replace_color_1, final_color, tolerance)){}
else if (replace (current_color, main_color_2, replace_color_2, final_color, tolerance)){}
else if (replace (current_color, main_color_3, replace_color_3, final_color, tolerance)){}
else if (replace (current_color, main_color_4, replace_color_4, final_color, tolerance)){}
else if (replace (current_color, main_color_5, replace_color_5, final_color, tolerance)){}
else if (replace (current_color, main_color_6, replace_color_6, final_color, tolerance)){}

else if (replace (current_color, green_color_1, replace_green_color_1, final_color, tolerance)){}
else if (replace (current_color, green_color_2, replace_green_color_2, final_color, tolerance)){}
else if (replace (current_color, outline_color, replace_outline_color, final_color, tolerance)){}

else if (replace (current_color, saber_color_0, saber_replace_0, final_color, tolerance)){}
else if (replace (current_color, saber_color_1, saber_replace_1, final_color, tolerance)){}
else if (replace (current_color, saber_color_2, saber_replace_2, final_color, tolerance)){}
else if (replace (current_color, saber_color_3, saber_replace_3, final_color, tolerance)){}
else if (replace (current_color, saber_color_4, saber_replace_4, final_color, tolerance)){}

else if (replace (current_color, hair_color, hair_color_replace, final_color, tolerance)){}
else if (replace (current_color, aura_color, aura_color_replace, final_color, tolerance)){}

else {final_color = current_color}"

[sub_resource type="VisualShaderNodeColorUniform" id=68]
uniform_name = "MainColor1"

[sub_resource type="VisualShaderNodeColorUniform" id=69]
uniform_name = "MainColor2"

[sub_resource type="VisualShaderNodeColorUniform" id=70]
uniform_name = "MainColor3"

[sub_resource type="VisualShaderNodeColorUniform" id=71]
uniform_name = "MainColor4"

[sub_resource type="VisualShaderNodeColorUniform" id=72]
uniform_name = "MainColor5"

[sub_resource type="VisualShaderNodeInput" id=32]
input_name = "time"

[sub_resource type="VisualShaderNodeColorUniform" id=73]
uniform_name = "MainColor6"

[sub_resource type="VisualShaderNodeColorUniform" id=74]
uniform_name = "R_MainColor1"

[sub_resource type="VisualShaderNodeColorUniform" id=75]
uniform_name = "R_MainColor2"

[sub_resource type="VisualShaderNodeColorUniform" id=76]
uniform_name = "R_MainColor3"

[sub_resource type="VisualShaderNodeColorUniform" id=77]
uniform_name = "R_MainColor4"

[sub_resource type="VisualShaderNodeColorUniform" id=78]
uniform_name = "R_MainColor5"

[sub_resource type="VisualShaderNodeScalarFunc" id=33]
function = 1

[sub_resource type="VisualShaderNodeColorUniform" id=79]
uniform_name = "R_MainColor6"

[sub_resource type="VisualShaderNodeGlobalExpression" id=80]
size = Vector2( 1036.64, 317.838 )
expression = "bool replace (vec3 color, vec3 main_color, vec3 replace_color, out vec3 output, float tol) 
{	vec3 diff3 = color - main_color;
	float m = max(max(abs(diff3.r), abs(diff3.g)), abs(diff3.b));
	
	if ((step(m, tol) == 1.0)){ 
		color = mix(color, replace_color, step(m, tol));
		output = color;
		return true;
	}
	return false;
}"

[sub_resource type="VisualShaderNodeScalarUniform" id=81]
uniform_name = "tolerance"

[sub_resource type="VisualShaderNodeColorUniform" id=82]
uniform_name = "CrystalColor3"

[sub_resource type="VisualShaderNodeColorUniform" id=83]
uniform_name = "R_CrystalColor1"

[sub_resource type="VisualShaderNodeColorUniform" id=84]
uniform_name = "R_CrystalColor2"

[sub_resource type="VisualShaderNodeColorUniform" id=85]
uniform_name = "R_CrystalColor3"

[sub_resource type="VisualShaderNodeColorUniform" id=86]
uniform_name = "CrystalColor1"

[sub_resource type="VisualShaderNodeColorUniform" id=87]
uniform_name = "CrystalColor2"

[sub_resource type="VisualShaderNodeInput" id=88]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarFunc" id=89]
function = 1

[sub_resource type="VisualShaderNodeScalarOp" id=90]
default_input_values = [ 0, 0.0, 1, 8.5 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarUniform" id=92]
uniform_name = "Alert"

[sub_resource type="VisualShaderNodeScalarOp" id=93]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=94]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=95]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=96]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=35]
default_input_values = [ 0, 0.0, 1, 42.0 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=97]
default_input_values = [ 0, 0.0, 1, 1.5 ]
operator = 2

[sub_resource type="VisualShaderNodeIf" id=98]

[sub_resource type="VisualShaderNodeScalarConstant" id=99]
constant = 1.0

[sub_resource type="VisualShaderNodeScalarOp" id=100]
default_input_values = [ 0, 0.0, 1, 1.4 ]

[sub_resource type="VisualShaderNodeScalarUniform" id=101]
uniform_name = "Flash"

[sub_resource type="VisualShaderNodeIf" id=102]
default_input_values = [ 0, 0.0, 1, 0.0, 2, 1e-05, 3, Vector3( 0, 0, 0 ), 4, Vector3( 11, 11, 11 ), 5, Vector3( 11, 11, 11 ) ]

[sub_resource type="VisualShaderNodeIf" id=103]
default_input_values = [ 0, 0.0, 1, 0.5, 2, 1e-05, 3, Vector3( 0, 0, 0 ), 4, Vector3( 1, 1, 1 ), 5, Vector3( 0, 0, 0 ) ]

[sub_resource type="VisualShaderNodeTexture" id=104]
source = 2

[sub_resource type="VisualShaderNodeScalarOp" id=106]
default_input_values = [ 0, 0.0, 1, 1.0 ]

[sub_resource type="VisualShaderNodeInput" id=20]
input_name = "color"

[sub_resource type="VisualShaderNodeInput" id=26]
input_name = "uv"

[sub_resource type="VisualShaderNodeInput" id=27]
input_name = "vertex"

[sub_resource type="VisualShaderNodeInput" id=28]
input_name = "alpha"

[resource]
code = "shader_type canvas_item;
uniform float Flash;
uniform float Should_Blink;
uniform vec4 MainColor1 : hint_color;
uniform vec4 MainColor2 : hint_color;
uniform vec4 MainColor3 : hint_color;
uniform vec4 MainColor4 : hint_color;
uniform vec4 MainColor5 : hint_color;
uniform vec4 MainColor6 : hint_color;
uniform vec4 R_MainColor1 : hint_color;
uniform vec4 R_MainColor2 : hint_color;
uniform vec4 R_MainColor3 : hint_color;
uniform vec4 R_MainColor4 : hint_color;
uniform vec4 R_MainColor5 : hint_color;
uniform vec4 R_MainColor6 : hint_color;
uniform vec4 CrystalColor1 : hint_color;
uniform vec4 CrystalColor2 : hint_color;
uniform vec4 CrystalColor3 : hint_color;
uniform vec4 R_CrystalColor1 : hint_color;
uniform float Alert;
uniform vec4 R_CrystalColor2 : hint_color;
uniform vec4 R_CrystalColor3 : hint_color;
uniform float tolerance;
uniform vec4 GreenColor1 : hint_color;
uniform vec4 GreenColor2 : hint_color;
uniform vec4 OutlineColor : hint_color;
uniform vec4 R_GreenColor1 : hint_color;
uniform vec4 R_GreenColor2 : hint_color;
uniform vec4 R_OutlineColor : hint_color;
uniform vec4 SaberColor1 : hint_color;
uniform vec4 SaberColor2 : hint_color;
uniform vec4 SaberColor3 : hint_color;
uniform vec4 SaberColor4 : hint_color;
uniform vec4 R_SaberColor1 : hint_color;
uniform vec4 R_SaberColor2 : hint_color;
uniform vec4 R_SaberColor3 : hint_color;
uniform vec4 R_SaberColor4 : hint_color;
uniform vec4 HairColor : hint_color;
uniform vec4 R_HairColor : hint_color;
uniform vec4 LightRedColor1 : hint_color;
uniform vec4 R_LightRedColor1 : hint_color;
uniform vec4 SaberColor0 : hint_color;
uniform vec4 R_SaberColor0 : hint_color;
uniform vec4 AuraColor : hint_color;
uniform vec4 R_AuraColor : hint_color;
uniform float Darken;
uniform float Alpha;


// GlobalExpression:0
	bool replace (vec3 color, vec3 main_color, vec3 replace_color, out vec3 output, float tol) 
	{	vec3 diff3 = color - main_color;
		float m = max(max(abs(diff3.r), abs(diff3.g)), abs(diff3.b));
		
		if ((step(m, tol) == 1.0)){ 
			color = mix(color, replace_color, step(m, tol));
			output = color;
			return true;
		}
		return false;
	}

void vertex() {
// Output:0

}

void fragment() {
// ScalarUniform:95
	float n_out95p0 = Flash;

// ScalarUniform:123
	float n_out123p0 = Should_Blink;

// ScalarOp:125
	float n_out125p0 = n_out95p0 * n_out123p0;

// Input:126
	float n_out126p0 = TIME;

// ScalarOp:127
	float n_in127p1 = 42.00000;
	float n_out127p0 = n_out126p0 * n_in127p1;

// ScalarFunc:128
	float n_out128p0 = cos(n_out127p0);

// ScalarFunc:129
	float n_out129p0 = abs(n_out128p0);

// ScalarOp:130
	float n_in130p1 = 0.30000;
	float n_out130p0 = n_out129p0 - n_in130p1;

// ScalarFunc:131
	float n_out131p0 = roundEven(n_out130p0);

// ScalarOp:134
	float n_out134p0 = n_out131p0 * n_out95p0;

// If:96
	float n_in96p1 = 0.00000;
	float n_in96p2 = 0.00001;
	vec3 n_in96p4 = vec3(11.00000, 11.00000, 11.00000);
	vec3 n_in96p5 = vec3(11.00000, 11.00000, 11.00000);
	vec3 n_out96p0;
	if(abs(n_out125p0 - n_in96p1) < n_in96p2)
	{
		n_out96p0 = vec3(n_out134p0);
	}
	else if(n_out125p0 < n_in96p1)
	{
		n_out96p0 = n_in96p5;
	}
	else
	{
		n_out96p0 = n_in96p4;
	}

// Color:136
	vec3 n_out136p0 = vec3(0.709804, 0.964706, 1.000000);
	float n_out136p1 = 1.000000;

// ColorUniform:55
	vec3 n_out55p0 = MainColor1.rgb;
	float n_out55p1 = MainColor1.a;

// ColorUniform:56
	vec3 n_out56p0 = MainColor2.rgb;
	float n_out56p1 = MainColor2.a;

// ColorUniform:57
	vec3 n_out57p0 = MainColor3.rgb;
	float n_out57p1 = MainColor3.a;

// ColorUniform:58
	vec3 n_out58p0 = MainColor4.rgb;
	float n_out58p1 = MainColor4.a;

// ColorUniform:59
	vec3 n_out59p0 = MainColor5.rgb;
	float n_out59p1 = MainColor5.a;

// ColorUniform:60
	vec3 n_out60p0 = MainColor6.rgb;
	float n_out60p1 = MainColor6.a;

// ColorUniform:65
	vec3 n_out65p0 = R_MainColor1.rgb;
	float n_out65p1 = R_MainColor1.a;

// ColorUniform:66
	vec3 n_out66p0 = R_MainColor2.rgb;
	float n_out66p1 = R_MainColor2.a;

// ColorUniform:67
	vec3 n_out67p0 = R_MainColor3.rgb;
	float n_out67p1 = R_MainColor3.a;

// ColorUniform:68
	vec3 n_out68p0 = R_MainColor4.rgb;
	float n_out68p1 = R_MainColor4.a;

// ColorUniform:69
	vec3 n_out69p0 = R_MainColor5.rgb;
	float n_out69p1 = R_MainColor5.a;

// ColorUniform:70
	vec3 n_out70p0 = R_MainColor6.rgb;
	float n_out70p1 = R_MainColor6.a;

// ColorUniform:77
	vec3 n_out77p0 = CrystalColor1.rgb;
	float n_out77p1 = CrystalColor1.a;

// ColorUniform:78
	vec3 n_out78p0 = CrystalColor2.rgb;
	float n_out78p1 = CrystalColor2.a;

// ColorUniform:73
	vec3 n_out73p0 = CrystalColor3.rgb;
	float n_out73p1 = CrystalColor3.a;

// ColorUniform:74
	vec3 n_out74p0 = R_CrystalColor1.rgb;
	float n_out74p1 = R_CrystalColor1.a;

// ScalarUniform:85
	float n_out85p0 = Alert;

// Scalar:92
	float n_out92p0 = 1.000000;

// Input:79
	float n_out79p0 = TIME;

// ScalarOp:81
	float n_in81p1 = 8.50000;
	float n_out81p0 = n_out79p0 * n_in81p1;

// ScalarFunc:80
	float n_out80p0 = cos(n_out81p0);

// ScalarOp:93
	float n_in93p1 = 1.40000;
	float n_out93p0 = n_out80p0 + n_in93p1;

// ScalarOp:90
	float n_in90p1 = 1.50000;
	float n_out90p0 = n_out85p0 * n_in90p1;

// ScalarOp:86
	float n_out86p0 = n_out93p0 * n_out90p0;

// If:91
	float n_in91p1 = 0.00000;
	float n_in91p2 = 0.00001;
	vec3 n_out91p0;
	if(abs(n_out85p0 - n_in91p1) < n_in91p2)
	{
		n_out91p0 = vec3(n_out92p0);
	}
	else if(n_out85p0 < n_in91p1)
	{
		n_out91p0 = vec3(n_out92p0);
	}
	else
	{
		n_out91p0 = vec3(n_out86p0);
	}

// VectorOp:87
	vec3 n_out87p0 = n_out74p0 * n_out91p0;

// ColorUniform:75
	vec3 n_out75p0 = R_CrystalColor2.rgb;
	float n_out75p1 = R_CrystalColor2.a;

// VectorOp:88
	vec3 n_out88p0 = n_out75p0 * n_out91p0;

// ColorUniform:76
	vec3 n_out76p0 = R_CrystalColor3.rgb;
	float n_out76p1 = R_CrystalColor3.a;

// VectorOp:89
	vec3 n_out89p0 = n_out76p0 * n_out91p0;

// ScalarUniform:72
	float n_out72p0 = tolerance;

// ColorUniform:102
	vec3 n_out102p0 = GreenColor1.rgb;
	float n_out102p1 = GreenColor1.a;

// ColorUniform:101
	vec3 n_out101p0 = GreenColor2.rgb;
	float n_out101p1 = GreenColor2.a;

// ColorUniform:103
	vec3 n_out103p0 = OutlineColor.rgb;
	float n_out103p1 = OutlineColor.a;

// ColorUniform:105
	vec3 n_out105p0 = R_GreenColor1.rgb;
	float n_out105p1 = R_GreenColor1.a;

// ColorUniform:104
	vec3 n_out104p0 = R_GreenColor2.rgb;
	float n_out104p1 = R_GreenColor2.a;

// ColorUniform:106
	vec3 n_out106p0 = R_OutlineColor.rgb;
	float n_out106p1 = R_OutlineColor.a;

// ColorUniform:107
	vec3 n_out107p0 = SaberColor1.rgb;
	float n_out107p1 = SaberColor1.a;

// ColorUniform:108
	vec3 n_out108p0 = SaberColor2.rgb;
	float n_out108p1 = SaberColor2.a;

// ColorUniform:109
	vec3 n_out109p0 = SaberColor3.rgb;
	float n_out109p1 = SaberColor3.a;

// ColorUniform:110
	vec3 n_out110p0 = SaberColor4.rgb;
	float n_out110p1 = SaberColor4.a;

// ColorUniform:111
	vec3 n_out111p0 = R_SaberColor1.rgb;
	float n_out111p1 = R_SaberColor1.a;

// ColorUniform:112
	vec3 n_out112p0 = R_SaberColor2.rgb;
	float n_out112p1 = R_SaberColor2.a;

// ColorUniform:113
	vec3 n_out113p0 = R_SaberColor3.rgb;
	float n_out113p1 = R_SaberColor3.a;

// ColorUniform:114
	vec3 n_out114p0 = R_SaberColor4.rgb;
	float n_out114p1 = R_SaberColor4.a;

// ColorUniform:115
	vec3 n_out115p0 = HairColor.rgb;
	float n_out115p1 = HairColor.a;

// ColorUniform:116
	vec3 n_out116p0 = R_HairColor.rgb;
	float n_out116p1 = R_HairColor.a;

// ColorUniform:117
	vec3 n_out117p0 = LightRedColor1.rgb;
	float n_out117p1 = LightRedColor1.a;

// ColorUniform:118
	vec3 n_out118p0 = R_LightRedColor1.rgb;
	float n_out118p1 = R_LightRedColor1.a;

// ColorUniform:119
	vec3 n_out119p0 = SaberColor0.rgb;
	float n_out119p1 = SaberColor0.a;

// ColorUniform:120
	vec3 n_out120p0 = R_SaberColor0.rgb;
	float n_out120p1 = R_SaberColor0.a;

// ColorUniform:121
	vec3 n_out121p0 = AuraColor.rgb;
	float n_out121p1 = AuraColor.a;

// ColorUniform:122
	vec3 n_out122p0 = R_AuraColor.rgb;
	float n_out122p1 = R_AuraColor.a;

// Expression:54
	vec3 n_out54p0;
	vec3 n_out54p1;
	n_out54p0 = vec3(0.0, 0.0, 0.0);
	n_out54p1 = vec3(0.0, 0.0, 0.0);
	{
		vec3 current_color = texture(TEXTURE, UV).rgb;
		
		if (replace (current_color, n_out77p0, n_out87p0, n_out54p0, n_out72p0)){}
		else if (replace (current_color, n_out78p0, n_out88p0, n_out54p0, n_out72p0)){}
		else if (replace (current_color, n_out73p0, n_out89p0, n_out54p0, n_out72p0)){}
		
		else if (replace (current_color, n_out117p0, n_out118p0, n_out54p0, n_out72p0)){}
		else if (replace (current_color, n_out55p0, n_out65p0, n_out54p0, n_out72p0)){}
		else if (replace (current_color, n_out56p0, n_out66p0, n_out54p0, n_out72p0)){}
		else if (replace (current_color, n_out57p0, n_out67p0, n_out54p0, n_out72p0)){}
		else if (replace (current_color, n_out58p0, n_out68p0, n_out54p0, n_out72p0)){}
		else if (replace (current_color, n_out59p0, n_out69p0, n_out54p0, n_out72p0)){}
		else if (replace (current_color, n_out60p0, n_out70p0, n_out54p0, n_out72p0)){}
		
		else if (replace (current_color, n_out102p0, n_out105p0, n_out54p0, n_out72p0)){}
		else if (replace (current_color, n_out101p0, n_out104p0, n_out54p0, n_out72p0)){}
		else if (replace (current_color, n_out103p0, n_out106p0, n_out54p0, n_out72p0)){}
		
		else if (replace (current_color, n_out119p0, n_out120p0, n_out54p0, n_out72p0)){}
		else if (replace (current_color, n_out107p0, n_out111p0, n_out54p0, n_out72p0)){}
		else if (replace (current_color, n_out108p0, n_out112p0, n_out54p0, n_out72p0)){}
		else if (replace (current_color, n_out109p0, n_out113p0, n_out54p0, n_out72p0)){}
		else if (replace (current_color, n_out110p0, n_out114p0, n_out54p0, n_out72p0)){}
		
		else if (replace (current_color, n_out115p0, n_out116p0, n_out54p0, n_out72p0)){}
		else if (replace (current_color, n_out121p0, n_out122p0, n_out54p0, n_out72p0)){}
		
		else {n_out54p0 = current_color}
	}

// Scalar:34
	float n_out34p0 = 1.000000;

// Scalar:30
	float n_out30p0 = 0.000000;

// If:23
	float n_in23p1 = 0.30000;
	float n_in23p2 = 0.00001;
	vec3 n_out23p0;
	if(abs(dot(n_out54p0, vec3(0.333333, 0.333333, 0.333333)) - n_in23p1) < n_in23p2)
	{
		n_out23p0 = vec3(n_out34p0);
	}
	else if(dot(n_out54p0, vec3(0.333333, 0.333333, 0.333333)) < n_in23p1)
	{
		n_out23p0 = vec3(n_out34p0);
	}
	else
	{
		n_out23p0 = vec3(n_out30p0);
	}

// ColorOp:137
	vec3 n_out137p0 = vec3(1.0) - (vec3(1.0) - n_out136p0) * (vec3(1.0) - n_out23p0);

// If:135
	float n_in135p1 = 0.50000;
	float n_in135p2 = 0.00001;
	vec3 n_out135p0;
	if(abs(dot(n_out96p0, vec3(0.333333, 0.333333, 0.333333)) - n_in135p1) < n_in135p2)
	{
		n_out135p0 = n_out137p0;
	}
	else if(dot(n_out96p0, vec3(0.333333, 0.333333, 0.333333)) < n_in135p1)
	{
		n_out135p0 = n_out54p0;
	}
	else
	{
		n_out135p0 = n_out137p0;
	}

// ScalarUniform:138
	float n_out138p0 = Darken;

// ColorOp:38
	vec3 n_out38p0 = min(n_out135p0, vec3(n_out138p0));

// ColorOp:139
	vec3 n_out139p0 = max(n_out38p0, n_out54p0);

// Texture:98
	vec3 n_out98p0;
	float n_out98p1;
	{
		vec4 _tex_read = texture(TEXTURE , UV.xy);
		n_out98p0 = _tex_read.rgb;
		n_out98p1 = _tex_read.a;
	}

// ScalarUniform:41
	float n_out41p0 = Alpha;

// Texture:2
	vec3 n_out2p0;
	float n_out2p1;
	{
		vec4 _tex_read = texture(TEXTURE , UV.xy);
		n_out2p0 = _tex_read.rgb;
		n_out2p1 = _tex_read.a;
	}

// Input:47
	float n_out47p0 = TIME;

// ScalarOp:48
	float n_in48p1 = 120.00000;
	float n_out48p0 = n_out47p0 * n_in48p1;

// ScalarFunc:43
	float n_out43p0 = cos(n_out48p0);

// ScalarOp:99
	float n_in99p1 = 1.00000;
	float n_out99p0 = n_out43p0 + n_in99p1;

// ScalarOp:100
	float n_in100p1 = 2.00000;
	float n_out100p0 = n_out99p0 / n_in100p1;

// ScalarFunc:46
	float n_out46p0 = roundEven(n_out100p0);

// ScalarOp:42
	float n_out42p0 = n_out2p1 * n_out46p0;

// If:50
	float n_in50p1 = 1.00000;
	float n_in50p2 = 0.00001;
	vec3 n_out50p0;
	if(abs(n_out41p0 - n_in50p1) < n_in50p2)
	{
		n_out50p0 = vec3(n_out2p1);
	}
	else if(n_out41p0 < n_in50p1)
	{
		n_out50p0 = vec3(n_out42p0);
	}
	else
	{
		n_out50p0 = vec3(n_out2p1);
	}

// If:97
	float n_in97p0 = 0.00000;
	float n_in97p1 = 0.50000;
	float n_in97p2 = 0.00001;
	vec3 n_in97p3 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out97p0;
	if(abs(n_in97p0 - n_in97p1) < n_in97p2)
	{
		n_out97p0 = n_in97p3;
	}
	else if(n_in97p0 < n_in97p1)
	{
		n_out97p0 = n_out50p0;
	}
	else
	{
		n_out97p0 = vec3(n_out98p1);
	}

// Output:0
	COLOR.rgb = n_out139p0;
	COLOR.a = dot(n_out97p0, vec3(0.333333, 0.333333, 0.333333));

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -120.12, 83.4903 )
mode = 1
flags/light_only = false
nodes/vertex/2/node = SubResource( 20 )
nodes/vertex/2/position = Vector2( 0, 200 )
nodes/vertex/3/node = SubResource( 26 )
nodes/vertex/3/position = Vector2( 140, 180 )
nodes/vertex/4/node = SubResource( 27 )
nodes/vertex/4/position = Vector2( 220, 120 )
nodes/vertex/5/node = SubResource( 28 )
nodes/vertex/5/position = Vector2( 120, 300 )
nodes/fragment/0/position = Vector2( 1940, 880 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( 660, 1380 )
nodes/fragment/6/node = SubResource( 32 )
nodes/fragment/6/position = Vector2( -500, 300 )
nodes/fragment/7/node = SubResource( 33 )
nodes/fragment/7/position = Vector2( -180, 300 )
nodes/fragment/9/node = SubResource( 35 )
nodes/fragment/9/position = Vector2( -340, 300 )
nodes/fragment/12/node = SubResource( 37 )
nodes/fragment/12/position = Vector2( 0, 300 )
nodes/fragment/14/node = SubResource( 39 )
nodes/fragment/14/position = Vector2( 640, 300 )
nodes/fragment/15/node = SubResource( 40 )
nodes/fragment/15/position = Vector2( 380, 300 )
nodes/fragment/16/node = SubResource( 41 )
nodes/fragment/16/position = Vector2( 180, 300 )
nodes/fragment/17/node = SubResource( 42 )
nodes/fragment/17/position = Vector2( 360, 380 )
nodes/fragment/23/node = SubResource( 46 )
nodes/fragment/23/position = Vector2( 140, 660 )
nodes/fragment/30/node = SubResource( 47 )
nodes/fragment/30/position = Vector2( -400, 740 )
nodes/fragment/34/node = SubResource( 49 )
nodes/fragment/34/position = Vector2( -400, 680 )
nodes/fragment/38/node = SubResource( 52 )
nodes/fragment/38/position = Vector2( 1500, 800 )
nodes/fragment/39/node = SubResource( 53 )
nodes/fragment/39/position = Vector2( -500, 420 )
nodes/fragment/41/node = SubResource( 55 )
nodes/fragment/41/position = Vector2( 660, 1260 )
nodes/fragment/42/node = SubResource( 56 )
nodes/fragment/42/position = Vector2( 880, 1480 )
nodes/fragment/43/node = SubResource( 57 )
nodes/fragment/43/position = Vector2( 180, 1520 )
nodes/fragment/46/node = SubResource( 60 )
nodes/fragment/46/position = Vector2( 680, 1520 )
nodes/fragment/47/node = SubResource( 61 )
nodes/fragment/47/position = Vector2( -140, 1520 )
nodes/fragment/48/node = SubResource( 62 )
nodes/fragment/48/position = Vector2( 20, 1520 )
nodes/fragment/50/node = SubResource( 63 )
nodes/fragment/50/position = Vector2( 1060, 1260 )
nodes/fragment/51/node = SubResource( 64 )
nodes/fragment/51/position = Vector2( 1080, 1480 )
nodes/fragment/52/node = SubResource( 65 )
nodes/fragment/52/position = Vector2( 860, 1600 )
nodes/fragment/54/node = SubResource( 67 )
nodes/fragment/54/position = Vector2( -1260, 820 )
nodes/fragment/54/size = Vector2( 1040.43, 1910.47 )
nodes/fragment/54/input_ports = "0,1,main_color_1;1,1,main_color_2;2,1,main_color_3;3,1,main_color_4;4,1,main_color_5;5,1,main_color_6;6,1,replace_color_1;7,1,replace_color_2;8,1,replace_color_3;9,1,replace_color_4;10,1,replace_color_5;11,1,replace_color_6;12,1,crystal_color_1;13,1,crystal_color_2;14,1,crystal_color_3;15,1,crystal_replace_1;16,1,crystal_replace_2;17,1,crystal_replace_3;18,0,tolerance;19,1,green_color_1;20,1,green_color_2;21,1,outline_color;22,1,replace_green_color_1;23,1,replace_green_color_2;24,1,replace_outline_color;25,1,saber_color_1;26,1,saber_color_2;27,1,saber_color_3;28,1,saber_color_4;29,1,saber_replace_1;30,1,saber_replace_2;31,1,saber_replace_3;32,1,saber_replace_4;33,1,hair_color;34,1,hair_color_replace;35,1,light_red_color_1;36,1,light_red_color_1_replace;37,1,saber_color_0;38,1,saber_replace_0;39,1,aura_color;40,1,aura_color_replace;"
nodes/fragment/54/output_ports = "0,1,final_color;1,1,crystal_colors;"
nodes/fragment/54/expression = "vec3 current_color = texture(TEXTURE, UV).rgb;

if (replace (current_color, crystal_color_1, crystal_replace_1, final_color, tolerance)){}
else if (replace (current_color, crystal_color_2, crystal_replace_2, final_color, tolerance)){}
else if (replace (current_color, crystal_color_3, crystal_replace_3, final_color, tolerance)){}

else if (replace (current_color, light_red_color_1, light_red_color_1_replace, final_color, tolerance)){}
else if (replace (current_color, main_color_1, replace_color_1, final_color, tolerance)){}
else if (replace (current_color, main_color_2, replace_color_2, final_color, tolerance)){}
else if (replace (current_color, main_color_3, replace_color_3, final_color, tolerance)){}
else if (replace (current_color, main_color_4, replace_color_4, final_color, tolerance)){}
else if (replace (current_color, main_color_5, replace_color_5, final_color, tolerance)){}
else if (replace (current_color, main_color_6, replace_color_6, final_color, tolerance)){}

else if (replace (current_color, green_color_1, replace_green_color_1, final_color, tolerance)){}
else if (replace (current_color, green_color_2, replace_green_color_2, final_color, tolerance)){}
else if (replace (current_color, outline_color, replace_outline_color, final_color, tolerance)){}

else if (replace (current_color, saber_color_0, saber_replace_0, final_color, tolerance)){}
else if (replace (current_color, saber_color_1, saber_replace_1, final_color, tolerance)){}
else if (replace (current_color, saber_color_2, saber_replace_2, final_color, tolerance)){}
else if (replace (current_color, saber_color_3, saber_replace_3, final_color, tolerance)){}
else if (replace (current_color, saber_color_4, saber_replace_4, final_color, tolerance)){}

else if (replace (current_color, hair_color, hair_color_replace, final_color, tolerance)){}
else if (replace (current_color, aura_color, aura_color_replace, final_color, tolerance)){}

else {final_color = current_color}"
nodes/fragment/55/node = SubResource( 68 )
nodes/fragment/55/position = Vector2( -1920, 220 )
nodes/fragment/56/node = SubResource( 69 )
nodes/fragment/56/position = Vector2( -1920, 320 )
nodes/fragment/57/node = SubResource( 70 )
nodes/fragment/57/position = Vector2( -1920, 420 )
nodes/fragment/58/node = SubResource( 71 )
nodes/fragment/58/position = Vector2( -1920, 520 )
nodes/fragment/59/node = SubResource( 72 )
nodes/fragment/59/position = Vector2( -1920, 620 )
nodes/fragment/60/node = SubResource( 73 )
nodes/fragment/60/position = Vector2( -1920, 720 )
nodes/fragment/65/node = SubResource( 74 )
nodes/fragment/65/position = Vector2( -1920, 860 )
nodes/fragment/66/node = SubResource( 75 )
nodes/fragment/66/position = Vector2( -1920, 960 )
nodes/fragment/67/node = SubResource( 76 )
nodes/fragment/67/position = Vector2( -1920, 1060 )
nodes/fragment/68/node = SubResource( 77 )
nodes/fragment/68/position = Vector2( -1920, 1160 )
nodes/fragment/69/node = SubResource( 78 )
nodes/fragment/69/position = Vector2( -1920, 1260 )
nodes/fragment/70/node = SubResource( 79 )
nodes/fragment/70/position = Vector2( -1920, 1360 )
nodes/fragment/71/node = SubResource( 80 )
nodes/fragment/71/position = Vector2( -1260, 2740 )
nodes/fragment/71/size = Vector2( 1036.64, 317.838 )
nodes/fragment/71/input_ports = ""
nodes/fragment/71/output_ports = ""
nodes/fragment/71/expression = "bool replace (vec3 color, vec3 main_color, vec3 replace_color, out vec3 output, float tol) 
{	vec3 diff3 = color - main_color;
	float m = max(max(abs(diff3.r), abs(diff3.g)), abs(diff3.b));
	
	if ((step(m, tol) == 1.0)){ 
		color = mix(color, replace_color, step(m, tol));
		output = color;
		return true;
	}
	return false;
}"
nodes/fragment/72/node = SubResource( 81 )
nodes/fragment/72/position = Vector2( -1740, 2240 )
nodes/fragment/73/node = SubResource( 82 )
nodes/fragment/73/position = Vector2( -1920, 1700 )
nodes/fragment/74/node = SubResource( 83 )
nodes/fragment/74/position = Vector2( -2040, 1840 )
nodes/fragment/75/node = SubResource( 84 )
nodes/fragment/75/position = Vector2( -2040, 1960 )
nodes/fragment/76/node = SubResource( 85 )
nodes/fragment/76/position = Vector2( -2040, 2080 )
nodes/fragment/77/node = SubResource( 86 )
nodes/fragment/77/position = Vector2( -1920, 1500 )
nodes/fragment/78/node = SubResource( 87 )
nodes/fragment/78/position = Vector2( -1920, 1600 )
nodes/fragment/79/node = SubResource( 88 )
nodes/fragment/79/position = Vector2( -2960, 2380 )
nodes/fragment/80/node = SubResource( 89 )
nodes/fragment/80/position = Vector2( -2640, 2380 )
nodes/fragment/81/node = SubResource( 90 )
nodes/fragment/81/position = Vector2( -2800, 2360 )
nodes/fragment/85/node = SubResource( 92 )
nodes/fragment/85/position = Vector2( -2720, 2180 )
nodes/fragment/86/node = SubResource( 93 )
nodes/fragment/86/position = Vector2( -2140, 2300 )
nodes/fragment/87/node = SubResource( 94 )
nodes/fragment/87/position = Vector2( -1660, 1860 )
nodes/fragment/88/node = SubResource( 95 )
nodes/fragment/88/position = Vector2( -1660, 1980 )
nodes/fragment/89/node = SubResource( 96 )
nodes/fragment/89/position = Vector2( -1660, 2100 )
nodes/fragment/90/node = SubResource( 97 )
nodes/fragment/90/position = Vector2( -2380, 2260 )
nodes/fragment/91/node = SubResource( 98 )
nodes/fragment/91/position = Vector2( -1940, 2220 )
nodes/fragment/92/node = SubResource( 99 )
nodes/fragment/92/position = Vector2( -2160, 2420 )
nodes/fragment/93/node = SubResource( 100 )
nodes/fragment/93/position = Vector2( -2380, 2380 )
nodes/fragment/95/node = SubResource( 101 )
nodes/fragment/95/position = Vector2( 820, 420 )
nodes/fragment/96/node = SubResource( 102 )
nodes/fragment/96/position = Vector2( 1440, 460 )
nodes/fragment/97/node = SubResource( 103 )
nodes/fragment/97/position = Vector2( 1560, 1040 )
nodes/fragment/98/node = SubResource( 104 )
nodes/fragment/98/position = Vector2( 1060, 1100 )
nodes/fragment/99/node = SubResource( 106 )
nodes/fragment/99/position = Vector2( 360, 1520 )
nodes/fragment/100/node = SubResource( 105 )
nodes/fragment/100/position = Vector2( 520, 1520 )
nodes/fragment/101/node = SubResource( 107 )
nodes/fragment/101/position = Vector2( -2220, 340 )
nodes/fragment/102/node = SubResource( 108 )
nodes/fragment/102/position = Vector2( -2220, 220 )
nodes/fragment/103/node = SubResource( 109 )
nodes/fragment/103/position = Vector2( -2220, 700 )
nodes/fragment/104/node = SubResource( 110 )
nodes/fragment/104/position = Vector2( -2220, 580 )
nodes/fragment/105/node = SubResource( 111 )
nodes/fragment/105/position = Vector2( -2220, 460 )
nodes/fragment/106/node = SubResource( 112 )
nodes/fragment/106/position = Vector2( -2220, 820 )
nodes/fragment/107/node = SubResource( 113 )
nodes/fragment/107/position = Vector2( -1640, -160 )
nodes/fragment/108/node = SubResource( 114 )
nodes/fragment/108/position = Vector2( -1640, -40 )
nodes/fragment/109/node = SubResource( 115 )
nodes/fragment/109/position = Vector2( -1640, 80 )
nodes/fragment/110/node = SubResource( 116 )
nodes/fragment/110/position = Vector2( -1640, 200 )
nodes/fragment/111/node = SubResource( 117 )
nodes/fragment/111/position = Vector2( -1360, -160 )
nodes/fragment/112/node = SubResource( 118 )
nodes/fragment/112/position = Vector2( -1360, -40 )
nodes/fragment/113/node = SubResource( 119 )
nodes/fragment/113/position = Vector2( -1360, 80 )
nodes/fragment/114/node = SubResource( 120 )
nodes/fragment/114/position = Vector2( -1360, 200 )
nodes/fragment/115/node = SubResource( 121 )
nodes/fragment/115/position = Vector2( -1340, 540 )
nodes/fragment/116/node = SubResource( 122 )
nodes/fragment/116/position = Vector2( -1060, 540 )
nodes/fragment/117/node = SubResource( 123 )
nodes/fragment/117/position = Vector2( -1340, 400 )
nodes/fragment/118/node = SubResource( 124 )
nodes/fragment/118/position = Vector2( -1060, 400 )
nodes/fragment/119/node = SubResource( 125 )
nodes/fragment/119/position = Vector2( -1640, -280 )
nodes/fragment/120/node = SubResource( 126 )
nodes/fragment/120/position = Vector2( -1360, -280 )
nodes/fragment/121/node = SubResource( 127 )
nodes/fragment/121/position = Vector2( -2220, 1020 )
nodes/fragment/122/node = SubResource( 128 )
nodes/fragment/122/position = Vector2( -2220, 1140 )
nodes/fragment/123/node = SubResource( 129 )
nodes/fragment/123/position = Vector2( 820, 540 )
nodes/fragment/125/node = SubResource( 131 )
nodes/fragment/125/position = Vector2( 1200, 600 )
nodes/fragment/126/node = SubResource( 132 )
nodes/fragment/126/position = Vector2( 920, 240 )
nodes/fragment/127/node = SubResource( 133 )
nodes/fragment/127/position = Vector2( 1080, 240 )
nodes/fragment/128/node = SubResource( 134 )
nodes/fragment/128/position = Vector2( 1240, 240 )
nodes/fragment/129/node = SubResource( 135 )
nodes/fragment/129/position = Vector2( 1420, 240 )
nodes/fragment/130/node = SubResource( 136 )
nodes/fragment/130/position = Vector2( 1600, 240 )
nodes/fragment/131/node = SubResource( 137 )
nodes/fragment/131/position = Vector2( 1760, 240 )
nodes/fragment/134/node = SubResource( 139 )
nodes/fragment/134/position = Vector2( 1200, 380 )
nodes/fragment/135/node = SubResource( 140 )
nodes/fragment/135/position = Vector2( 1260, 740 )
nodes/fragment/136/node = SubResource( 141 )
nodes/fragment/136/position = Vector2( 160, 560 )
nodes/fragment/137/node = SubResource( 142 )
nodes/fragment/137/position = Vector2( 660, 740 )
nodes/fragment/138/node = SubResource( 143 )
nodes/fragment/138/position = Vector2( 1160, 960 )
nodes/fragment/139/node = SubResource( 144 )
nodes/fragment/139/position = Vector2( 1720, 840 )
nodes/fragment/connections = PoolIntArray( 6, 0, 9, 0, 7, 0, 12, 0, 12, 0, 16, 0, 16, 0, 15, 0, 9, 0, 7, 0, 34, 0, 23, 3, 34, 0, 23, 5, 30, 0, 23, 4, 2, 1, 42, 0, 47, 0, 48, 0, 48, 0, 43, 0, 46, 0, 42, 1, 41, 0, 50, 0, 42, 0, 51, 0, 52, 0, 51, 1, 2, 1, 50, 4, 2, 1, 50, 3, 42, 0, 50, 5, 55, 0, 54, 0, 56, 0, 54, 1, 57, 0, 54, 2, 58, 0, 54, 3, 59, 0, 54, 4, 60, 0, 54, 5, 65, 0, 54, 6, 66, 0, 54, 7, 67, 0, 54, 8, 68, 0, 54, 9, 69, 0, 54, 10, 70, 0, 54, 11, 54, 0, 23, 0, 72, 0, 54, 18, 77, 0, 54, 12, 78, 0, 54, 13, 73, 0, 54, 14, 79, 0, 81, 0, 81, 0, 80, 0, 74, 0, 87, 0, 75, 0, 88, 0, 76, 0, 89, 0, 87, 0, 54, 15, 88, 0, 54, 16, 89, 0, 54, 17, 85, 0, 90, 0, 90, 0, 86, 1, 85, 0, 91, 0, 92, 0, 91, 3, 92, 0, 91, 5, 86, 0, 91, 4, 91, 0, 89, 1, 91, 0, 88, 1, 91, 0, 87, 1, 80, 0, 93, 0, 93, 0, 86, 0, 50, 0, 97, 5, 97, 0, 0, 1, 98, 1, 97, 4, 43, 0, 99, 0, 99, 0, 100, 0, 100, 0, 46, 0, 102, 0, 54, 19, 101, 0, 54, 20, 103, 0, 54, 21, 105, 0, 54, 22, 104, 0, 54, 23, 106, 0, 54, 24, 107, 0, 54, 25, 108, 0, 54, 26, 109, 0, 54, 27, 110, 0, 54, 28, 111, 0, 54, 29, 112, 0, 54, 30, 113, 0, 54, 31, 114, 0, 54, 32, 115, 0, 54, 33, 116, 0, 54, 34, 117, 0, 54, 35, 118, 0, 54, 36, 6, 0, 9, 0, 7, 0, 12, 0, 12, 0, 16, 0, 16, 0, 15, 0, 9, 0, 7, 0, 34, 0, 23, 3, 34, 0, 23, 5, 30, 0, 23, 4, 2, 1, 42, 0, 47, 0, 48, 0, 48, 0, 43, 0, 46, 0, 42, 1, 41, 0, 50, 0, 42, 0, 51, 0, 52, 0, 51, 1, 2, 1, 50, 4, 2, 1, 50, 3, 42, 0, 50, 5, 55, 0, 54, 0, 56, 0, 54, 1, 57, 0, 54, 2, 58, 0, 54, 3, 59, 0, 54, 4, 60, 0, 54, 5, 65, 0, 54, 6, 66, 0, 54, 7, 67, 0, 54, 8, 68, 0, 54, 9, 69, 0, 54, 10, 70, 0, 54, 11, 54, 0, 23, 0, 72, 0, 54, 18, 77, 0, 54, 12, 78, 0, 54, 13, 73, 0, 54, 14, 79, 0, 81, 0, 81, 0, 80, 0, 74, 0, 87, 0, 75, 0, 88, 0, 76, 0, 89, 0, 87, 0, 54, 15, 88, 0, 54, 16, 89, 0, 54, 17, 85, 0, 90, 0, 90, 0, 86, 1, 85, 0, 91, 0, 92, 0, 91, 3, 92, 0, 91, 5, 86, 0, 91, 4, 91, 0, 89, 1, 91, 0, 88, 1, 91, 0, 87, 1, 80, 0, 93, 0, 93, 0, 86, 0, 50, 0, 97, 5, 97, 0, 0, 1, 98, 1, 97, 4, 43, 0, 99, 0, 99, 0, 100, 0, 100, 0, 46, 0, 102, 0, 54, 19, 101, 0, 54, 20, 103, 0, 54, 21, 105, 0, 54, 22, 104, 0, 54, 23, 106, 0, 54, 24, 107, 0, 54, 25, 108, 0, 54, 26, 109, 0, 54, 27, 110, 0, 54, 28, 111, 0, 54, 29, 112, 0, 54, 30, 113, 0, 54, 31, 114, 0, 54, 32, 115, 0, 54, 33, 116, 0, 54, 34, 117, 0, 54, 35, 118, 0, 54, 36, 119, 0, 54, 37, 120, 0, 54, 38, 121, 0, 54, 39, 122, 0, 54, 40, 6, 0, 9, 0, 7, 0, 12, 0, 12, 0, 16, 0, 16, 0, 15, 0, 9, 0, 7, 0, 34, 0, 23, 3, 34, 0, 23, 5, 30, 0, 23, 4, 2, 1, 42, 0, 47, 0, 48, 0, 48, 0, 43, 0, 46, 0, 42, 1, 41, 0, 50, 0, 42, 0, 51, 0, 52, 0, 51, 1, 2, 1, 50, 4, 2, 1, 50, 3, 42, 0, 50, 5, 55, 0, 54, 0, 56, 0, 54, 1, 57, 0, 54, 2, 58, 0, 54, 3, 59, 0, 54, 4, 60, 0, 54, 5, 65, 0, 54, 6, 66, 0, 54, 7, 67, 0, 54, 8, 68, 0, 54, 9, 69, 0, 54, 10, 70, 0, 54, 11, 54, 0, 23, 0, 72, 0, 54, 18, 77, 0, 54, 12, 78, 0, 54, 13, 73, 0, 54, 14, 79, 0, 81, 0, 81, 0, 80, 0, 74, 0, 87, 0, 75, 0, 88, 0, 76, 0, 89, 0, 87, 0, 54, 15, 88, 0, 54, 16, 89, 0, 54, 17, 85, 0, 90, 0, 90, 0, 86, 1, 85, 0, 91, 0, 92, 0, 91, 3, 92, 0, 91, 5, 86, 0, 91, 4, 91, 0, 89, 1, 91, 0, 88, 1, 91, 0, 87, 1, 80, 0, 93, 0, 93, 0, 86, 0, 50, 0, 97, 5, 97, 0, 0, 1, 98, 1, 97, 4, 43, 0, 99, 0, 99, 0, 100, 0, 100, 0, 46, 0, 102, 0, 54, 19, 101, 0, 54, 20, 103, 0, 54, 21, 105, 0, 54, 22, 104, 0, 54, 23, 106, 0, 54, 24, 107, 0, 54, 25, 108, 0, 54, 26, 109, 0, 54, 27, 110, 0, 54, 28, 111, 0, 54, 29, 112, 0, 54, 30, 113, 0, 54, 31, 114, 0, 54, 32, 115, 0, 54, 33, 116, 0, 54, 34, 117, 0, 54, 35, 118, 0, 54, 36, 6, 0, 9, 0, 7, 0, 12, 0, 12, 0, 16, 0, 16, 0, 15, 0, 9, 0, 7, 0, 34, 0, 23, 3, 34, 0, 23, 5, 30, 0, 23, 4, 2, 1, 42, 0, 47, 0, 48, 0, 48, 0, 43, 0, 46, 0, 42, 1, 41, 0, 50, 0, 42, 0, 51, 0, 52, 0, 51, 1, 2, 1, 50, 4, 2, 1, 50, 3, 42, 0, 50, 5, 55, 0, 54, 0, 56, 0, 54, 1, 57, 0, 54, 2, 58, 0, 54, 3, 59, 0, 54, 4, 60, 0, 54, 5, 65, 0, 54, 6, 66, 0, 54, 7, 67, 0, 54, 8, 68, 0, 54, 9, 69, 0, 54, 10, 70, 0, 54, 11, 54, 0, 23, 0, 72, 0, 54, 18, 77, 0, 54, 12, 78, 0, 54, 13, 73, 0, 54, 14, 79, 0, 81, 0, 81, 0, 80, 0, 74, 0, 87, 0, 75, 0, 88, 0, 76, 0, 89, 0, 87, 0, 54, 15, 88, 0, 54, 16, 89, 0, 54, 17, 85, 0, 90, 0, 90, 0, 86, 1, 85, 0, 91, 0, 92, 0, 91, 3, 92, 0, 91, 5, 86, 0, 91, 4, 91, 0, 89, 1, 91, 0, 88, 1, 91, 0, 87, 1, 80, 0, 93, 0, 93, 0, 86, 0, 50, 0, 97, 5, 97, 0, 0, 1, 98, 1, 97, 4, 43, 0, 99, 0, 99, 0, 100, 0, 100, 0, 46, 0, 102, 0, 54, 19, 101, 0, 54, 20, 103, 0, 54, 21, 105, 0, 54, 22, 104, 0, 54, 23, 106, 0, 54, 24, 107, 0, 54, 25, 108, 0, 54, 26, 109, 0, 54, 27, 110, 0, 54, 28, 111, 0, 54, 29, 112, 0, 54, 30, 113, 0, 54, 31, 114, 0, 54, 32, 115, 0, 54, 33, 116, 0, 54, 34, 117, 0, 54, 35, 118, 0, 54, 36, 119, 0, 54, 37, 120, 0, 54, 38, 121, 0, 54, 39, 122, 0, 54, 40, 126, 0, 127, 0, 127, 0, 128, 0, 128, 0, 129, 0, 129, 0, 130, 0, 130, 0, 131, 0, 95, 0, 134, 1, 136, 0, 137, 0, 23, 0, 137, 1, 135, 0, 38, 0, 138, 0, 38, 1, 137, 0, 135, 3, 137, 0, 135, 4, 54, 0, 135, 5, 17, 0, 14, 1, 15, 0, 14, 0, 131, 0, 134, 0, 134, 0, 96, 3, 125, 0, 96, 0, 96, 0, 135, 0, 123, 0, 125, 1, 95, 0, 125, 0, 38, 0, 139, 0, 139, 0, 0, 0, 54, 0, 139, 1, 6, 0, 9, 0, 7, 0, 12, 0, 12, 0, 16, 0, 16, 0, 15, 0, 9, 0, 7, 0, 34, 0, 23, 3, 34, 0, 23, 5, 30, 0, 23, 4, 2, 1, 42, 0, 47, 0, 48, 0, 48, 0, 43, 0, 46, 0, 42, 1, 41, 0, 50, 0, 42, 0, 51, 0, 52, 0, 51, 1, 2, 1, 50, 4, 2, 1, 50, 3, 42, 0, 50, 5, 55, 0, 54, 0, 56, 0, 54, 1, 57, 0, 54, 2, 58, 0, 54, 3, 59, 0, 54, 4, 60, 0, 54, 5, 65, 0, 54, 6, 66, 0, 54, 7, 67, 0, 54, 8, 68, 0, 54, 9, 69, 0, 54, 10, 70, 0, 54, 11, 54, 0, 23, 0, 72, 0, 54, 18, 77, 0, 54, 12, 78, 0, 54, 13, 73, 0, 54, 14, 79, 0, 81, 0, 81, 0, 80, 0, 74, 0, 87, 0, 75, 0, 88, 0, 76, 0, 89, 0, 87, 0, 54, 15, 88, 0, 54, 16, 89, 0, 54, 17, 85, 0, 90, 0, 90, 0, 86, 1, 85, 0, 91, 0, 92, 0, 91, 3, 92, 0, 91, 5, 86, 0, 91, 4, 91, 0, 89, 1, 91, 0, 88, 1, 91, 0, 87, 1, 80, 0, 93, 0, 93, 0, 86, 0, 50, 0, 97, 5, 97, 0, 0, 1, 98, 1, 97, 4, 43, 0, 99, 0, 99, 0, 100, 0, 100, 0, 46, 0, 102, 0, 54, 19, 101, 0, 54, 20, 103, 0, 54, 21, 105, 0, 54, 22, 104, 0, 54, 23, 106, 0, 54, 24, 107, 0, 54, 25, 108, 0, 54, 26, 109, 0, 54, 27, 110, 0, 54, 28, 111, 0, 54, 29, 112, 0, 54, 30, 113, 0, 54, 31, 114, 0, 54, 32, 115, 0, 54, 33, 116, 0, 54, 34, 117, 0, 54, 35, 118, 0, 54, 36, 6, 0, 9, 0, 7, 0, 12, 0, 12, 0, 16, 0, 16, 0, 15, 0, 9, 0, 7, 0, 34, 0, 23, 3, 34, 0, 23, 5, 30, 0, 23, 4, 2, 1, 42, 0, 47, 0, 48, 0, 48, 0, 43, 0, 46, 0, 42, 1, 41, 0, 50, 0, 42, 0, 51, 0, 52, 0, 51, 1, 2, 1, 50, 4, 2, 1, 50, 3, 42, 0, 50, 5, 55, 0, 54, 0, 56, 0, 54, 1, 57, 0, 54, 2, 58, 0, 54, 3, 59, 0, 54, 4, 60, 0, 54, 5, 65, 0, 54, 6, 66, 0, 54, 7, 67, 0, 54, 8, 68, 0, 54, 9, 69, 0, 54, 10, 70, 0, 54, 11, 54, 0, 23, 0, 72, 0, 54, 18, 77, 0, 54, 12, 78, 0, 54, 13, 73, 0, 54, 14, 79, 0, 81, 0, 81, 0, 80, 0, 74, 0, 87, 0, 75, 0, 88, 0, 76, 0, 89, 0, 87, 0, 54, 15, 88, 0, 54, 16, 89, 0, 54, 17, 85, 0, 90, 0, 90, 0, 86, 1, 85, 0, 91, 0, 92, 0, 91, 3, 92, 0, 91, 5, 86, 0, 91, 4, 91, 0, 89, 1, 91, 0, 88, 1, 91, 0, 87, 1, 80, 0, 93, 0, 93, 0, 86, 0, 50, 0, 97, 5, 97, 0, 0, 1, 98, 1, 97, 4, 43, 0, 99, 0, 99, 0, 100, 0, 100, 0, 46, 0, 102, 0, 54, 19, 101, 0, 54, 20, 103, 0, 54, 21, 105, 0, 54, 22, 104, 0, 54, 23, 106, 0, 54, 24, 107, 0, 54, 25, 108, 0, 54, 26, 109, 0, 54, 27, 110, 0, 54, 28, 111, 0, 54, 29, 112, 0, 54, 30, 113, 0, 54, 31, 114, 0, 54, 32, 115, 0, 54, 33, 116, 0, 54, 34, 117, 0, 54, 35, 118, 0, 54, 36, 119, 0, 54, 37, 120, 0, 54, 38, 121, 0, 54, 39, 122, 0, 54, 40, 6, 0, 9, 0, 7, 0, 12, 0, 12, 0, 16, 0, 16, 0, 15, 0, 9, 0, 7, 0, 34, 0, 23, 3, 34, 0, 23, 5, 30, 0, 23, 4, 2, 1, 42, 0, 47, 0, 48, 0, 48, 0, 43, 0, 46, 0, 42, 1, 41, 0, 50, 0, 42, 0, 51, 0, 52, 0, 51, 1, 2, 1, 50, 4, 2, 1, 50, 3, 42, 0, 50, 5, 55, 0, 54, 0, 56, 0, 54, 1, 57, 0, 54, 2, 58, 0, 54, 3, 59, 0, 54, 4, 60, 0, 54, 5, 65, 0, 54, 6, 66, 0, 54, 7, 67, 0, 54, 8, 68, 0, 54, 9, 69, 0, 54, 10, 70, 0, 54, 11, 54, 0, 23, 0, 72, 0, 54, 18, 77, 0, 54, 12, 78, 0, 54, 13, 73, 0, 54, 14, 79, 0, 81, 0, 81, 0, 80, 0, 74, 0, 87, 0, 75, 0, 88, 0, 76, 0, 89, 0, 87, 0, 54, 15, 88, 0, 54, 16, 89, 0, 54, 17, 85, 0, 90, 0, 90, 0, 86, 1, 85, 0, 91, 0, 92, 0, 91, 3, 92, 0, 91, 5, 86, 0, 91, 4, 91, 0, 89, 1, 91, 0, 88, 1, 91, 0, 87, 1, 80, 0, 93, 0, 93, 0, 86, 0, 50, 0, 97, 5, 97, 0, 0, 1, 98, 1, 97, 4, 43, 0, 99, 0, 99, 0, 100, 0, 100, 0, 46, 0, 102, 0, 54, 19, 101, 0, 54, 20, 103, 0, 54, 21, 105, 0, 54, 22, 104, 0, 54, 23, 106, 0, 54, 24, 107, 0, 54, 25, 108, 0, 54, 26, 109, 0, 54, 27, 110, 0, 54, 28, 111, 0, 54, 29, 112, 0, 54, 30, 113, 0, 54, 31, 114, 0, 54, 32, 115, 0, 54, 33, 116, 0, 54, 34, 117, 0, 54, 35, 118, 0, 54, 36, 6, 0, 9, 0, 7, 0, 12, 0, 12, 0, 16, 0, 16, 0, 15, 0, 9, 0, 7, 0, 34, 0, 23, 3, 34, 0, 23, 5, 30, 0, 23, 4, 2, 1, 42, 0, 47, 0, 48, 0, 48, 0, 43, 0, 46, 0, 42, 1, 41, 0, 50, 0, 42, 0, 51, 0, 52, 0, 51, 1, 2, 1, 50, 4, 2, 1, 50, 3, 42, 0, 50, 5, 55, 0, 54, 0, 56, 0, 54, 1, 57, 0, 54, 2, 58, 0, 54, 3, 59, 0, 54, 4, 60, 0, 54, 5, 65, 0, 54, 6, 66, 0, 54, 7, 67, 0, 54, 8, 68, 0, 54, 9, 69, 0, 54, 10, 70, 0, 54, 11, 54, 0, 23, 0, 72, 0, 54, 18, 77, 0, 54, 12, 78, 0, 54, 13, 73, 0, 54, 14, 79, 0, 81, 0, 81, 0, 80, 0, 74, 0, 87, 0, 75, 0, 88, 0, 76, 0, 89, 0, 87, 0, 54, 15, 88, 0, 54, 16, 89, 0, 54, 17, 85, 0, 90, 0, 90, 0, 86, 1, 85, 0, 91, 0, 92, 0, 91, 3, 92, 0, 91, 5, 86, 0, 91, 4, 91, 0, 89, 1, 91, 0, 88, 1, 91, 0, 87, 1, 80, 0, 93, 0, 93, 0, 86, 0, 50, 0, 97, 5, 97, 0, 0, 1, 98, 1, 97, 4, 43, 0, 99, 0, 99, 0, 100, 0, 100, 0, 46, 0, 102, 0, 54, 19, 101, 0, 54, 20, 103, 0, 54, 21, 105, 0, 54, 22, 104, 0, 54, 23, 106, 0, 54, 24, 107, 0, 54, 25, 108, 0, 54, 26, 109, 0, 54, 27, 110, 0, 54, 28, 111, 0, 54, 29, 112, 0, 54, 30, 113, 0, 54, 31, 114, 0, 54, 32, 115, 0, 54, 33, 116, 0, 54, 34, 117, 0, 54, 35, 118, 0, 54, 36, 119, 0, 54, 37, 120, 0, 54, 38, 121, 0, 54, 39, 122, 0, 54, 40, 126, 0, 127, 0, 127, 0, 128, 0, 128, 0, 129, 0, 129, 0, 130, 0, 130, 0, 131, 0, 95, 0, 134, 1, 136, 0, 137, 0, 23, 0, 137, 1, 135, 0, 38, 0, 138, 0, 38, 1, 137, 0, 135, 3, 137, 0, 135, 4, 54, 0, 135, 5, 17, 0, 14, 1, 15, 0, 14, 0, 131, 0, 134, 0, 134, 0, 96, 3, 125, 0, 96, 0, 96, 0, 135, 0, 123, 0, 125, 1, 95, 0, 125, 0, 38, 0, 139, 0, 139, 0, 0, 0, 54, 0, 139, 1 )
