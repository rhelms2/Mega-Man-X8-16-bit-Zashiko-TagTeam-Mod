[gd_resource type="ShaderMaterial" load_steps=7 format=2]

[sub_resource type="VisualShaderNodeTexture" id=37]
source = 2

[sub_resource type="VisualShaderNodeVectorOp" id=38]

[sub_resource type="VisualShaderNodeScalarUniform" id=39]
uniform_name = "Color"

[sub_resource type="VisualShaderNodeScalarOp" id=40]
operator = 2

[sub_resource type="VisualShaderNodeScalarUniform" id=41]
uniform_name = "Alpha"

[sub_resource type="VisualShader" id=42]
code = "shader_type canvas_item;
render_mode blend_add;

uniform float Color;
uniform float Alpha;



void vertex() {
// Output:0

}

void fragment() {
// ScalarUniform:4
	float n_out4p0 = Color;

// Texture:2
	vec3 n_out2p0;
	float n_out2p1;
	{
		vec4 _tex_read = texture(TEXTURE , UV.xy);
		n_out2p0 = _tex_read.rgb;
		n_out2p1 = _tex_read.a;
	}

// VectorOp:3
	vec3 n_out3p0 = vec3(n_out4p0) + n_out2p0;

// ScalarUniform:6
	float n_out6p0 = Alpha;

// ScalarOp:5
	float n_out5p0 = n_out2p1 * n_out6p0;

// Output:0
	COLOR.rgb = n_out3p0;
	COLOR.a = n_out5p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -350.55, -59.4587 )
mode = 1
modes/blend = 1
flags/light_only = false
nodes/fragment/2/node = SubResource( 37 )
nodes/fragment/2/position = Vector2( -60, 120 )
nodes/fragment/3/node = SubResource( 38 )
nodes/fragment/3/position = Vector2( 180, 60 )
nodes/fragment/4/node = SubResource( 39 )
nodes/fragment/4/position = Vector2( -60, 20 )
nodes/fragment/5/node = SubResource( 40 )
nodes/fragment/5/position = Vector2( 200, 200 )
nodes/fragment/6/node = SubResource( 41 )
nodes/fragment/6/position = Vector2( -100, 300 )
nodes/fragment/connections = PoolIntArray( 2, 0, 3, 1, 3, 0, 0, 0, 4, 0, 3, 0, 6, 0, 5, 1, 2, 1, 5, 0, 5, 0, 0, 1 )

[resource]
shader = SubResource( 42 )
shader_param/Color = 0.25
shader_param/Alpha = 0.0
